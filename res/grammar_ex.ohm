LEDBASIC {
    Program = emptyLine* configLine? (emptyLine | Line)*

    configLine = "###" (~eol any)+ eol

    emptyLine = comment? eol
    Line = ( DataLine | Label | Statement ) comment? (eol | end)

    Statement = Jump
              | Comparison
              | Assignment
              | Loop
              | Next
              | Delay
              | Print
              | Return
              | LibCall
              | endLit

    Label = LabelIdentifier ":"

    LabelIdentifier =  digit+ | identifier

    variable = identifier

    identifier (an identifier) = ~keyword identifierName

    identifierName = identifierStart identifierPart*

    identifierStart = letter

    identifierPart = identifierStart | digit | "_"

    keyword = for | if | rem | let | next | then | else | goto | gosub | return | random | delay | print | data | read | led | io | matrix

    Random = caseInsensitive<"random">

    if = "if" ~identifierPart
    else = "else" ~identifierPart
    for = "for" ~identifierPart
    rem = "rem" ~identifierPart
    let = "let" ~identifierPart
    next = "next" ~identifierPart
    then = "then" ~identifierPart
    goto = "goto" ~identifierPart
    gosub = "gosub" ~identifierPart
    return = "return" ~identifierPart
    random = "random" ~identifierPart
    delay = "delay" ~identifierPart
    print = "print" ~identifierPart
    data = "data" ~identifierPart
    read = "read" ~identifierPart
    led = "led" ~identifierPart
    io = "io" ~identifierPart
    matrix = "matrix" ~identifierPart

    Assignment = (caseInsensitive<"let">)? identifier "=" Expression

    Expression =  LogicOrExpression
    
    LogicOrExpression = LogicOrExpression "or" LogicAndExpression -- logor
                      | LogicAndExpression

    LogicAndExpression = LogicAndExpression "and" BitwiseORExpression -- logand
                       | BitwiseORExpression

    BitwiseORExpression = BitwiseORExpression "|" BitwiseANDExpression -- bor
                      | BitwiseANDExpression

    BitwiseANDExpression = BitwiseANDExpression "&" CompareExpression -- band
                       | CompareExpression

    CompareExpression = CompareExpression compOperation AddExpression -- comp
                      | AddExpression

    AddExpression = AddExpression addOperation MulExpression -- add
                  | MulExpression

    MulExpression = MulExpression mulOperation PrefixExpression -- mul
                  | PrefixExpression

    PrefixExpression = prefixOperation ParenExpression -- prefix
                     | ParenExpression
    
    ParenExpression = "(" Expression ")" -- paren
                    | RestExpression

    RestExpression = LibCall
        | DataRead
        | Random
        | variable
        | value

    Return = caseInsensitive<"return">
    endLit = caseInsensitive<"end">

// Operation
    addOperation =  "+" | "-"
    compOperation  =  "<=" |  "<>" | ">=" | "<" | "=" | ">"
    mulOperation = "*" | "/" | "%"
    prefixOperation = "-"

// Loop
    Loop = caseInsensitive<"for"> variable "=" Expression (caseInsensitive<"to"> | caseInsensitive<"downto">) Expression (caseInsensitive<"step"> Expression)?
    Next = caseInsensitive<"next"> variable

// Comparison
    Comparison = caseInsensitive<"if"> Expression (caseInsensitive<"then">)? Statement (caseInsensitive<"else"> Statement)?

// Jump
    Jump = (caseInsensitive<"goto"> | caseInsensitive<"gosub">) LabelIdentifier

// Delay
    Delay = caseInsensitive<"delay"> Expression

// Print
    Print = caseInsensitive<"print"> PrintArgs
    PrintArgs = PrintArg (PrintArgsList)*
    PrintArgsList = PrintArgSeparator PrintArg
    PrintArgSeparator = "," | ";"
    PrintArg = Expression | string

// LibCall
    LibCall = (caseInsensitive<"LED"> | caseInsensitive<"IO"> | caseInsensitive<"MATRIX">) "." alnum+ "(" CallArgs ")"
    CallArgs = ListOf<Expression, ",">

// Date read
    DataLine = (Label)? caseInsensitive<"data"> DataElems
    DataRead = caseInsensitive<"read"> LabelIdentifier "," Expression
    DataElems = NonemptyListOf<(hexValue | binaryValue | decimalValue), ",">

// Value
    binaryDigit = "0".."1"
    string = "\"" ("\\\"" | (~"\"" any))* "\""

    value = hexValue | binaryValue | decimalValue
    decimalValue = digit+ 
    hexValue = ("0x" | "0X") hexDigit+
    binaryValue = "0b" binaryDigit+

// Comment, Space
    space := " " | "\t"

    comment = ("\'" | caseInsensitive<"rem">) (~eol any)*
    eol (end of line)
        = "\n" | "\r\n"
}
